# üê≥ Docker Compose for Local Development

services:

  # LocalStack for S3 simulation
  localstack:
    image: localstack/localstack:3.0
    container_name: image-storage-localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - DEBUG=1
      - PERSISTENCE=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - S3_SKIP_SIGNATURE_VALIDATION=1
      - AWS_DEFAULT_REGION=eu-central-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./localstack-data:/var/lib/localstack"
      - "./init-s3.sh:/etc/localstack/init/ready.d/init-s3.sh"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4566/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: image-storage-keycloak
    ports:
      - "8081:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true
    entrypoint:
      - /bin/bash
      - -c
      - |
        echo "Waiting for database to be ready..."
        sleep 10
        echo "Starting Keycloak..."
        exec /opt/keycloak/bin/kc.sh start-dev
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "timeout 3 bash -c '</dev/tcp/localhost/8080' || exit 1" ]
      interval: 15s
      timeout: 5s
      retries: 8
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: image-storage-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgresSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: image-storage-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ImageStorage
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d ImageStorage" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Application
  image-storage:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: image-storage-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev,keycloak
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_REGION=us-east-1
      - AWS_S3_ENDPOINT=http://localstack:4566
      - IMAGE_BUCKET_NAME=dev-images-bucket
      - THUMBNAIL_BUCKET_NAME=dev-thumbnails-bucket
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ImageStorage
      - SPRING_DATASOURCE_USERNAME=isUser
      - SPRING_DATASOURCE_PASSWORD=isPassword
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - KEYCLOAK_CLIENT_ID=image-storage-app
      - KEYCLOAK_CLIENT_SECRET=your-client-secret
      - KEYCLOAK_ISSUER_URI=http://keycloak:8080/realms/image-storage
      - KEYCLOAK_AUTH_URI=http://localhost:8081/realms/image-storage/protocol/openid-connect/auth
      - KEYCLOAK_TOKEN_URI=http://keycloak:8080/realms/image-storage/protocol/openid-connect/token
      - KEYCLOAK_USERINFO_URI=http://keycloak:8080/realms/image-storage/protocol/openid-connect/userinfo
      - KEYCLOAK_JWK_URI=http://keycloak:8080/realms/image-storage/protocol/openid-connect/certs
    depends_on:
      localstack:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  localstack-data:
  postgres-data:
